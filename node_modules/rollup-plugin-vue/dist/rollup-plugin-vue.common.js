'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var rollupPluginutils = require('rollup-pluginutils');
var deIndent = _interopDefault(require('de-indent'));
var htmlMinifier = _interopDefault(require('html-minifier'));
var parse5 = _interopDefault(require('parse5'));
var validateTemplate = _interopDefault(require('vue-template-validator'));
var transpileVueTemplate = _interopDefault(require('vue-template-es2015-compiler'));
var path = require('path');
var MagicString = _interopDefault(require('magic-string'));
var debug = _interopDefault(require('debug'));
var fs = require('fs');

var debug$1 = debug('rollup-plugin-vue');

function getNodeAttrs (node) {
    if (node.attrs) {
        var attributes = {};

        for (var i = 0, list = node.attrs; i < list.length; i += 1) {
            var attr = list[i];

            attributes[attr.name] = attr.value;
        }

        return attributes
    }

    return {}
}

/**
 * Pad content with empty lines to get correct line number in errors.
 */
function padContent (content) {
    return content
          .split(/\r?\n/g)
          .map(function () { return ''; })
          .join('\n')
}

/**
 * Wrap code inside a with statement inside a function
 * This is necessary for Vue 2 template compilation
 */
function wrapRenderFunction (code) {
    return ("function(){" + code + "}")
}

function injectRender (script, render, lang, options) {
    if (['js', 'babel'].indexOf(lang.toLowerCase()) > -1) {
        var matches = /(export default[^{]*\{)/g.exec(script);
        if (matches) {
            var renderScript = 'module.exports={' +
                  "render: " + (wrapRenderFunction(render.render)) + "," +
                  'staticRenderFns: [' +
                  (render.staticRenderFns.map(wrapRenderFunction).join(',')) + "],}";

            if (options.stripWith !== false) {
                renderScript = transpileVueTemplate(renderScript, options.vue);
            }

            var result = script.split(matches[1])
                  .join(renderScript.replace('module.exports={', 'export default {').replace(/\}$/, ''));

            return result
        }

        debug$1(("No injection location found in: \n" + script + "\n"));
    } else if (options.inject) {
        return options.inject(script, render, lang, options)
    }
    throw new Error('[rollup-plugin-vue] could not find place to inject template in script.')
}

/**
 * @param script
 * @param template
 * @param lang
 * @returns {string}
 */
function injectTemplate (script, template, lang, options) {
    if (template === undefined) { return script }

    if (['js', 'babel'].indexOf(lang.toLowerCase()) > -1) {
        var matches = /(export default[^{]*\{)/g.exec(script);
        if (matches) {
            return script.split(matches[1])
                  .join(((matches[1]) + " template: " + (JSON.stringify(template)) + ","))
        }

        debug$1(("No injection location found in: \n" + script + "\n"));
    } else if (options.inject) {
        return options.inject(script, template, lang, options)
    }

    throw new Error('[rollup-plugin-vue] could not find place to inject template in script.')
}

/**
 * Compile template: DeIndent and minify html.
 */
function processTemplate (source, id, content, options) {
    if (source === undefined) { return undefined }

    var node = source.node;
    var code = source.code;

    var warnings = validateTemplate(code, content);
    if (warnings) {
        var relativePath = path.relative(process.cwd(), id);
        warnings.forEach(function (msg) {
            console.warn(("\n Warning in " + relativePath + ":\n " + msg));
        });
    }

    /* eslint-disable no-underscore-dangle */
    var start = node.content.childNodes[0].__location.startOffset;
    var end = node.content.childNodes[node.content.childNodes.length - 1].__location.endOffset;
    var template = deIndent(content.slice(start, end));
    /* eslint-enable no-underscore-dangle */

    return htmlMinifier.minify(template, options.htmlMinifier)
}

function processScript (source, id, content, options, nodes) {
    var template = processTemplate(nodes.template[0], id, content, options, nodes);

    var lang = source.attrs.lang || 'js';

    var script = deIndent(padContent(content.slice(0, content.indexOf(source.code))) + source.code);
    var map = (new MagicString(script)).generateMap({ hires: true });

    if (options.compileTemplate) {
        var render = require('vue-template-compiler').compile(template);

        return { map: map, code: injectRender(script, render, lang, options) }
    } else {
        return { map: map, code: injectTemplate(script, template, lang, options) }
    }
}

function processStyle (styles, id) {
    return styles.map(function (style) { return ({
        id: id,
        code: deIndent(style.code).trim(),
        lang: style.attrs.lang || 'css'
    }); })
}

function parseTemplate (code) {
    var fragment = parse5.parseFragment(code, { locationInfo: true });

    var nodes = {
        template: [],
        script: [],
        style: []
    };

    for (var i = fragment.childNodes.length - 1; i >= 0; i -= 1) {
        var name = fragment.childNodes[i].nodeName;
        if (!(name in nodes)) {
            nodes[name] = [];
        }
        nodes[name].push({
            node: fragment.childNodes[i],
            code: parse5.serialize(fragment.childNodes[i]),
            attrs: getNodeAttrs(fragment.childNodes[i])
        });
    }

    if (nodes.script.length === 0) {
        throw new Error('There must be at least one script tag or one' +
            ' template tag per *.vue file.')
    }

    return nodes
}

function vueTransform (code, id, options) {
    var nodes = parseTemplate(code);
    var js = processScript(nodes.script[0], id, code, options, nodes);
    var css = processStyle(nodes.style, id, code, options, nodes);

    var isProduction = process.env.NODE_ENV === 'production';
    var isWithStripped = options.stripWith !== false;

    if (!isProduction && !isWithStripped) {
        js.code = js.code + '\nmodule.exports.render._withStripped = true';
    }

    if (options.styleToImports === true) {
        var style = css.map(function (s, i) { return 'import ' + JSON.stringify((id + "." + i + ".vue.component." + (s.lang))) + ';'; }).join(' ');

        return { css: css, code: style + js.code, map: js.map }
    }

    return { css: css, code: js.code, map: js.map }
}

var DEFAULT_OPTIONS = {
    htmlMinifier: {
        customAttrSurround: [[/@/, new RegExp('')], [/:/, new RegExp('')]],
        collapseWhitespace: true,
        removeComments: true
    },
    vue: {
        // Remove all trasforms added by vue since it's up to the user
        // to use whatever he wants
        // https://github.com/vuejs/vue-template-es2015-compiler/blob/master/index.js#L6
        transforms: {
            stripWith: true, // remove the with statement

            arrow: false,
            classes: false,
            collections: false,
            computedProperty: false,
            conciseMethodProperty: false,
            constLoop: false,
            dangerousForOf: false,
            dangerousTaggedTemplateString: false,
            defaultParameter: false,
            destructuring: false,
            forOf: false,
            generator: false,
            letConst: false,
            modules: false,
            numericLiteral: false,
            parameterDestructuring: false,
            reservedProperties: false,
            spreadRest: false,
            stickyRegExp: false,
            templateString: false,
            unicodeRegExp: false
        }
    },
    styleToImports: false
};

var compileStyle = function (files, options) {
    if (options.css === false) {
        return
    }

        // Combine all stylesheets.
    var css = '';
    var allStyles = [];

    Object.keys(files).forEach(function (file) {
        files[file].forEach(function (style) {
            css += style.code + '\n';
            allStyles.push(style);
        });
    });

        // Emit styles through callback
    if (typeof options.css === 'function') {
        options.css(css, allStyles);

        return
    }

        // Don't generate empty style file.
    if (!css.trim().length) {
        return
    }

    var dest = options.css;

    if (typeof dest !== 'string') {
        return
    }

        // Emit styles to file
    fs.writeFile(dest, css, function (err) {
        if (err) { throw err }
    });
};

function mergeOptions (options, defaults) {
    Object.keys(defaults).forEach(function (key) {
        var val = defaults[key];

        if (key in options) {
            if (typeof options[key] === 'object') {
                mergeOptions(options[key], val);
            }
        } else {
            options[key] = val;
        }
    });

    return options
}

function vue (options) {
    if ( options === void 0 ) options = {};

    debug$1('Yo! rolling vue!');
    var filter = rollupPluginutils.createFilter(options.include, options.exclude);

    delete options.include;
    delete options.exclude;

    /* eslint-disable */
    try {
        var vueVersion = require('vue').version;
        if (parseInt(vueVersion.split('.')[0], 10) >= 2) {
            if (!('compileTemplate' in options)) {
                debug$1('Vue 2.0 detected. Compiling template.');
                options.compileTemplate = true;
            }
        } else {
            if (options.compileTemplate === true) {
                console.warn('Vue version < 2.0.0 does not support compiled template.');
            }
            options.compileTemplate = false;
        }
    } catch (e) {}
    /* eslint-enable */

    options = mergeOptions(options, DEFAULT_OPTIONS);

    var styles = {};

    return {
        name: 'vue',
        resolveId: function resolveId (id) {
            if (id.indexOf('.vue.component.') > -1) {
                return id
            }
        },
        load: function load (id) {
            if (id.indexOf('.vue.component.') > -1) {
                var parts = id.split('.');
                var component = parts.slice(0, parts.length - 4).join('.');
                var index = parseInt(parts[parts.length - 4]);

                return styles[component][index] || ''
            }
        },
        transform: function transform (source, id) {
            if (!filter(id) || !id.endsWith('.vue')) {
                debug$1(("Ignore: " + id));
                return null
            }

            var ref = vueTransform(source, id, options);
            var code = ref.code;
            var css = ref.css;
            var map = ref.map;
            styles[id] = css;

            return { code: code, map: map }
        },

        ongenerate: function ongenerate () {
            if (options.styleToImports !== true) {
                compileStyle(styles, options);
            }
        }
    }
}

module.exports = vue;
